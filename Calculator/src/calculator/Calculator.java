/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package calculator;

/**
 *
 * @author AKSHER
 */
public class Calculator extends javax.swing.JFrame {

    /**
     * Creates new form Calculator
     */
    public Calculator() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jBplus = new javax.swing.JButton();
        jBdote = new javax.swing.JButton();
        jB0 = new javax.swing.JButton();
        jB1 = new javax.swing.JButton();
        jB4 = new javax.swing.JButton();
        jB7 = new javax.swing.JButton();
        DEL = new javax.swing.JButton();
        jB2 = new javax.swing.JButton();
        jB3 = new javax.swing.JButton();
        jB5 = new javax.swing.JButton();
        jB8 = new javax.swing.JButton();
        CE = new javax.swing.JButton();
        jB6 = new javax.swing.JButton();
        jB9 = new javax.swing.JButton();
        C = new javax.swing.JButton();
        jBequals = new javax.swing.JButton();
        jBminus = new javax.swing.JButton();
        jBmultiply = new javax.swing.JButton();
        jBdivid = new javax.swing.JButton();
        jBsign = new javax.swing.JButton();
        Display = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Calculator");
        setPreferredSize(new java.awt.Dimension(360, 360));
        setSize(new java.awt.Dimension(450, 450));

        jBplus.setText("+");
        jBplus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBplusActionPerformed(evt);
            }
        });

        jBdote.setText(".");
        jBdote.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBdoteActionPerformed(evt);
            }
        });

        jB0.setText("0");
        jB0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB0ActionPerformed(evt);
            }
        });

        jB1.setText("1");
        jB1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB1ActionPerformed(evt);
            }
        });

        jB4.setText("4");
        jB4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB4ActionPerformed(evt);
            }
        });

        jB7.setText("7");
        jB7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB7ActionPerformed(evt);
            }
        });

        DEL.setText("DEL");
        DEL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DELActionPerformed(evt);
            }
        });

        jB2.setText("2");
        jB2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB2ActionPerformed(evt);
            }
        });

        jB3.setText("3");
        jB3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB3ActionPerformed(evt);
            }
        });

        jB5.setText("5");
        jB5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB5ActionPerformed(evt);
            }
        });

        jB8.setText("8");
        jB8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB8ActionPerformed(evt);
            }
        });

        CE.setText("CE");
        CE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CEActionPerformed(evt);
            }
        });

        jB6.setText("6");
        jB6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB6ActionPerformed(evt);
            }
        });

        jB9.setText("9");
        jB9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB9ActionPerformed(evt);
            }
        });

        C.setText("C");
        C.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CActionPerformed(evt);
            }
        });

        jBequals.setText("=");
        jBequals.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBequalsActionPerformed(evt);
            }
        });

        jBminus.setText("-");
        jBminus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBminusActionPerformed(evt);
            }
        });

        jBmultiply.setText("x");
        jBmultiply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBmultiplyActionPerformed(evt);
            }
        });

        jBdivid.setText("/");
        jBdivid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBdividActionPerformed(evt);
            }
        });

        jBsign.setText("+/-");
        jBsign.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBsignActionPerformed(evt);
            }
        });

        Display.setEditable(false);
        Display.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        Display.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        Display.setText("0");
        Display.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DisplayActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel1.setText("Made By Akshar Patel .");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(Display)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jB1, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jB0, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jBdote, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jB2, javax.swing.GroupLayout.DEFAULT_SIZE, 61, Short.MAX_VALUE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jBplus, javax.swing.GroupLayout.DEFAULT_SIZE, 61, Short.MAX_VALUE)
                                .addComponent(jB3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jBequals, javax.swing.GroupLayout.DEFAULT_SIZE, 61, Short.MAX_VALUE)
                                .addComponent(jBminus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(DEL, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 61, Short.MAX_VALUE)
                                .addComponent(jB4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jB7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(CE, javax.swing.GroupLayout.DEFAULT_SIZE, 61, Short.MAX_VALUE)
                                .addComponent(jB5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jB8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jB9, javax.swing.GroupLayout.DEFAULT_SIZE, 61, Short.MAX_VALUE)
                                .addComponent(jB6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(C, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jBdivid, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jBsign, javax.swing.GroupLayout.DEFAULT_SIZE, 61, Short.MAX_VALUE)
                                .addComponent(jBmultiply, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addContainerGap(50, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(19, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Display, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(DEL)
                    .addComponent(CE)
                    .addComponent(C)
                    .addComponent(jBsign))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jB7)
                    .addComponent(jB8)
                    .addComponent(jB9)
                    .addComponent(jBdivid))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jB4)
                    .addComponent(jB5)
                    .addComponent(jB6)
                    .addComponent(jBmultiply))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jB1)
                    .addComponent(jB2)
                    .addComponent(jB3)
                    .addComponent(jBminus))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jB0)
                    .addComponent(jBdote)
                    .addComponent(jBplus)
                    .addComponent(jBequals))
                .addGap(38, 38, 38))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jB9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB9ActionPerformed
       if(Display.getText().equals("ERROR"))
            ;//Do Nothing
        else if(Display.getText().equals("0") || isOperatorPressed )
            Display.setText("9");
        else
            Display.setText(Display.getText() + 9);
        isOperatorPressed = false; 
    }//GEN-LAST:event_jB9ActionPerformed

    private void jBdoteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBdoteActionPerformed
        if(Display.getText().equals("ERROR"))
            ;//Do Nothing
        else if(Display.getText().equals("0") || isOperatorPressed){
            Display.setText("0.");
            isDote = true;
        }
        else {
            if(isDote)
                ;//Do Nothing
            else
                Display.setText(Display.getText() + ".");
            isDote = true;
        }
        isOperatorPressed = false;
    }//GEN-LAST:event_jBdoteActionPerformed
       
    private void jBplusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBplusActionPerformed
        if(Display.getText().equals("ERROR"))
            ;//Do Nothing
        else {
            if(whichOperand == false){
                data1 = Double.parseDouble(Display.getText());
                whichOperand = true;
            }
            else{
                if(isOperatorPressed)
                    ;//Do Nothing
                else{
                    data2 = Double.parseDouble(Display.getText());
                    
                    switch(operator){
                        case 1:
                            data1 += data2;
                            break;
                        case 2:
                            data1 -= data2;
                            break;
                        case 3:
                            data1 *= data2;
                            break;
                        case 4:
                            if(data2 != 0.0)
                                data1 /= data2;
                            else 
                                Display.setText("ERROR");
                            break;
                    }
                    if(Display.getText().equals("ERROR")){
                        isOperatorPressed = false;
                        operator = 0;
                    }
                    else if(data1 == Math.floor(data1))
                        Display.setText(""+(int)Math.floor(data1));
                    else
                        Display.setText(""+data1);
                }
            }
            if(!Display.getText().equals("ERROR")) {
                isOperatorPressed = true;
                operator = 1;
            }
        }
    }//GEN-LAST:event_jBplusActionPerformed

    private void jB6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB6ActionPerformed
        if(Display.getText().equals("ERROR"))
            ;//Do Nothing
        else if(Display.getText().equals("0") || isOperatorPressed )
            Display.setText("6");
        else
            Display.setText(Display.getText() + 6);
        isOperatorPressed = false; 
    }//GEN-LAST:event_jB6ActionPerformed

    private void jBequalsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBequalsActionPerformed
        if(Display.getText().equals("ERROR"))
            ;//Do Nothing
        else {
            if(whichOperand == false){
                data1 = Double.parseDouble(Display.getText());
                whichOperand = false; //No Need To Write
                isOperatorPressed = true;
            }
            else {
                if(isOperatorPressed){
                    data2 = data1;
                    switch(operator){
                        case 1:
                            data1 += data2;
                            break;
                        case 2:
                            data1 -= data2;
                            break;
                        case 3:
                            data1 *= data2;
                            break;
                        case 4:
                            if(data2 != 0.0)
                                data1 /= data2;
                            else 
                                Display.setText("ERROR");
                            break;
                    }
                    if(Display.getText().equals("ERROR")){
                        isOperatorPressed = false;
                        operator = 0;
                    }
                    else if(data1 == Math.floor(data1))
                        Display.setText(""+(int)Math.floor(data1));
                    else
                        Display.setText(""+data1);
                }
                else {
                    data2 = Double.parseDouble(Display.getText());
                    switch(operator){
                        case 1:
                            data1 += data2;
                            break;
                        case 2:
                            data1 -= data2;
                            break;
                        case 3:
                            data1 *= data2;
                            break;
                        case 4:
                            if(data2 != 0.0)
                                data1 /= data2;
                            else 
                                Display.setText("ERROR");
                            break;
                    }
                    if(Display.getText().equals("ERROR")){
                        isOperatorPressed = false;
                        operator = 0;
                    }
                    else if(data1 == Math.floor(data1))
                        Display.setText(""+(int)Math.floor(data1));
                    else
                        Display.setText(""+data1);
                    
                }
                whichOperand = false;
            }
            if(!Display.getText().equals("ERROR")) {
                isOperatorPressed = true;
                operator = 5;
            }
        }
    }//GEN-LAST:event_jBequalsActionPerformed

    private void jB1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB1ActionPerformed
        if(Display.getText().equals("ERROR"))
            ;//Do Nothing
        else if(Display.getText().equals("0") || isOperatorPressed )
            Display.setText("1");
        else
            Display.setText(Display.getText() + 1);
        isOperatorPressed = false; 
    }//GEN-LAST:event_jB1ActionPerformed

    private void jBdividActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBdividActionPerformed
        if(Display.getText().equals("ERROR"))
            ;//Do Nothing
        else {
            if(whichOperand == false){
                data1 = Double.parseDouble(Display.getText());
                whichOperand = true;
            }
            else{
                if(isOperatorPressed)
                    ;//Do Nothing
                else{
                    data2 = Double.parseDouble(Display.getText());
                    
                    switch(operator){
                        case 1:
                            data1 += data2;
                            break;
                        case 2:
                            data1 -= data2;
                            break;
                        case 3:
                            data1 *= data2;
                            break;
                        case 4:
                            if(data2 != 0.0)
                                data1 /= data2;
                            else 
                                Display.setText("ERROR");
                            break;
                    }
                    if(Display.getText().equals("ERROR")){
                        isOperatorPressed = false;
                        operator = 0;
                    }
                    else if(data1 == Math.floor(data1))
                        Display.setText(""+(int)Math.floor(data1));
                    else
                        Display.setText(""+data1);
                }
            }
            if(!Display.getText().equals("ERROR")) {
                isOperatorPressed = true;
                operator = 4;
            }
        }
    }//GEN-LAST:event_jBdividActionPerformed

    private void DELActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DELActionPerformed
        if(Display.getText().equals("ERROR") || Display.getText().equals("0") || isOperatorPressed )
            ;//Do Nothing
        else if(Display.getText().length() > 1)
            Display.setText(Display.getText().substring(0,Display.getText().length() - 1));
        else if(Display.getText().length() == 1)
            Display.setText("0");
        if(Display.getText().indexOf('.') == -1)
            isDote = false;
        
    }//GEN-LAST:event_DELActionPerformed

    private void jB0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB0ActionPerformed
        if(Display.getText().equals("ERROR"))
            ;//Do Nothing
        else if(Display.getText().equals("0") || isOperatorPressed )
            Display.setText("0");
        else
            Display.setText(Display.getText() + 0);
        isOperatorPressed = false; 
    }//GEN-LAST:event_jB0ActionPerformed

    private void DisplayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DisplayActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_DisplayActionPerformed

    private void jB2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB2ActionPerformed
        if(Display.getText().equals("ERROR"))
            ;//Do Nothing
        else if(Display.getText().equals("0") || isOperatorPressed )
            Display.setText("2");
        else
            Display.setText(Display.getText() + 2);
        isOperatorPressed = false; 
    }//GEN-LAST:event_jB2ActionPerformed

    private void jB3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB3ActionPerformed
        if(Display.getText().equals("ERROR"))
            ;//Do Nothing
        else if(Display.getText().equals("0") || isOperatorPressed )
            Display.setText("3");
        else
            Display.setText(Display.getText() + 3);
        isOperatorPressed = false; 
    }//GEN-LAST:event_jB3ActionPerformed

    private void jB4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB4ActionPerformed
        if(Display.getText().equals("ERROR"))
            ;//Do Nothing
        else if(Display.getText().equals("0") || isOperatorPressed )
            Display.setText("4");
        else
            Display.setText(Display.getText() + 4);
        isOperatorPressed = false; 
    }//GEN-LAST:event_jB4ActionPerformed

    private void jB5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB5ActionPerformed
        if(Display.getText().equals("ERROR"))
            ;//Do Nothing
        else if(Display.getText().equals("0") || isOperatorPressed )
            Display.setText("5");
        else
            Display.setText(Display.getText() + 5);
        isOperatorPressed = false; 
    }//GEN-LAST:event_jB5ActionPerformed

    private void jB7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB7ActionPerformed
        if(Display.getText().equals("ERROR"))
            ;//Do Nothing
        else if(Display.getText().equals("0") || isOperatorPressed )
            Display.setText("7");
        else
            Display.setText(Display.getText() + 7);
        isOperatorPressed = false; 
    }//GEN-LAST:event_jB7ActionPerformed

    private void jB8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB8ActionPerformed
        if(Display.getText().equals("ERROR"))
            ;//Do Nothing
        else if(Display.getText().equals("0") || isOperatorPressed )
            Display.setText("8");
        else
            Display.setText(Display.getText() + 8);
        isOperatorPressed = false; 
    }//GEN-LAST:event_jB8ActionPerformed

    private void CEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CEActionPerformed
        if(Display.getText().equals("ERROR"))
            ;
        else{
            Display.setText("0");
            isDote = false;
        }
    }//GEN-LAST:event_CEActionPerformed

    private void CActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CActionPerformed
        Display.setText("0");
        isOperatorPressed = false;
        operator = 0;
        whichOperand = false;
        isDote = false;
    }//GEN-LAST:event_CActionPerformed

    private void jBsignActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBsignActionPerformed
        if(Display.getText().equals("ERROR"))
            ;//Do Nothing
        else{
            if(Display.getText().equals("0"))
                ;//Do Nthing
            else{
                if(Double.parseDouble(Display.getText()) > 0.0)
                    Display.setText("-"+Display.getText());
                else
                    Display.setText(Display.getText().substring(1,Display.getText().length()));
            }
        }
    }//GEN-LAST:event_jBsignActionPerformed

    private void jBminusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBminusActionPerformed
        if(Display.getText().equals("ERROR"))
            ;//Do Nothing
        else {
            if(whichOperand == false){
                data1 = Double.parseDouble(Display.getText());
                whichOperand = true;
            }
            else{
                if(isOperatorPressed)
                    ;//Do Nothing
                else{
                    data2 = Double.parseDouble(Display.getText());
                    
                    switch(operator){
                        case 1:
                            data1 += data2;
                            break;
                        case 2:
                            data1 -= data2;
                            break;
                        case 3:
                            data1 *= data2;
                            break;
                        case 4:
                            if(data2 != 0.0)
                                data1 /= data2;
                            else 
                                Display.setText("ERROR");
                            break;
                    }
                    if(Display.getText().equals("ERROR")){
                        isOperatorPressed = false;
                        operator = 0;
                    }
                    else if(data1 == Math.floor(data1))
                        Display.setText(""+(int)Math.floor(data1));
                    else
                        Display.setText(""+data1);
                }
            }
            if(!Display.getText().equals("ERROR")) {
                isOperatorPressed = true;
                operator = 2;
            }
        }
    }//GEN-LAST:event_jBminusActionPerformed

    private void jBmultiplyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBmultiplyActionPerformed
        if(Display.getText().equals("ERROR"))
            ;//Do Nothing
        else {
            if(whichOperand == false){
                data1 = Double.parseDouble(Display.getText());
                whichOperand = true;
            }
            else{
                if(isOperatorPressed)
                    ;//Do Nothing
                else{
                    data2 = Double.parseDouble(Display.getText());
                    
                    switch(operator){
                        case 1:
                            data1 += data2;
                            break;
                        case 2:
                            data1 -= data2;
                            break;
                        case 3:
                            data1 *= data2;
                            break;
                        case 4:
                            if(data2 != 0.0)
                                data1 /= data2;
                            else 
                                Display.setText("ERROR");
                            break;
                    }
                    if(Display.getText().equals("ERROR")){
                        isOperatorPressed = false;
                        operator = 0;
                    }
                    else if(data1 == Math.floor(data1))
                        Display.setText(""+(int)Math.floor(data1));
                    else
                        Display.setText(""+data1);
                }
            }
            if(!Display.getText().equals("ERROR")) {
                isOperatorPressed = true;
                operator = 3;
            }
        }
    }//GEN-LAST:event_jBmultiplyActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Calculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Calculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Calculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Calculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Calculator().setVisible(true);
            }
        });
    }
    
    private double data1 , data2;
    private boolean isDote = false; //True on dote press
    private boolean isOperatorPressed = false; //True on operator press
    private boolean whichOperand = false; //True on second operand
    private int operator = 0;/* 0->NoSelect, 1->Addition, 2->Minius
                             3->Multiplt, 4->Divide, 5->Equal  */
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton C;
    private javax.swing.JButton CE;
    private javax.swing.JButton DEL;
    private javax.swing.JTextField Display;
    private javax.swing.JButton jB0;
    private javax.swing.JButton jB1;
    private javax.swing.JButton jB2;
    private javax.swing.JButton jB3;
    private javax.swing.JButton jB4;
    private javax.swing.JButton jB5;
    private javax.swing.JButton jB6;
    private javax.swing.JButton jB7;
    private javax.swing.JButton jB8;
    private javax.swing.JButton jB9;
    private javax.swing.JButton jBdivid;
    private javax.swing.JButton jBdote;
    private javax.swing.JButton jBequals;
    private javax.swing.JButton jBminus;
    private javax.swing.JButton jBmultiply;
    private javax.swing.JButton jBplus;
    private javax.swing.JButton jBsign;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
